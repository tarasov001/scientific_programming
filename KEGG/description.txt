Легенда

Решение биоинформатических задач часто связано с обработкой информации о генах в ДНК. На основе генов строятся белки, которые выполняют различные функции внутри живого организма. К таким функциям относятся построение каркаса для других белков, доставка молекул по организму, приведение в движение отдельных частей организма, передача сигналов (информации), управление поведением других белков, и другие функции. Функции индивидуальных белков могут взаимодействовать друг с другом, образуя последовательности действий. Такие цепочки являются биологическими путями, по которым происходит распространение сигнала и взаимодействий.

Условие

В задаче дан файл с прямоугольной таблицей: в первой колонке записано название биологического пути, во второй колонке записано неиспользуемое значение, начиная с третьей колонки записаны названия генов, принадлежащие этому биологическому пути. Для разных путей количество генов различно. Колонки в файле разделяются символом табуляции.

Название биологического пути состоит из нескольких слов, склееных с использованием символа нижнего подчеркивания, например: "hsa00051_Fructose_and_mannose_metabolism".

В данном названии содержится 5 слов: "hsa00051", "Fructose", "and", "mannose", "metabolism". Словами в названии биологического пути назовем такие подстроки, слева и справа от которых есть либо символ '_', либо нет никакого символа.

От биологов поступают запросы на подсчет числа биологических путей, удовлетворяющих одновременно двум критериям:

в названии биологического пути содержится заданное слово path_part;
в цепочке генов данного биологического пути встречается заданный ген gene.
Требования

Необходимо реализовать 2 функции со следующими заголовками:

def parse_gene_paths(table_text : str) -> dict
def count_paths_for_gene(
    gene_in_path : dict, 
    gene : str, 
    path_part : str
) -> int

Первая функция parse_gene_paths получает на вход в виде одной строки целиком всю таблицу, которую необходимо предобработать, создать из неё словарь gene_in_path и вернуть его в качестве работы вашей функции. В словаре вы можете сохранить любую информацию, по которой далее будете осуществлять требуемый подсчет. Функция parse_gene_paths вызывается один раз перед запросами на подсчет.

Вторая функция count_paths_for_gene на вход получает 3 аргумента: словарь gene_in_path, подготовленный первой функцией, gene – название гена, path_part – заданное слово в биологическом пути. Функция count_paths_for_gene будет вызвана несколько раз с различными входными данными. В результате каждого вызова. функция должна вернуть ответ на вопрос задачи: количество биологических путей, удовлетворяющих двум критериям из условия.

Пример вызова на тесте 1

gene_in_path = parse_gene_paths(table_text)
path_count = count_paths_for_gene(
    gene_in_path, 
    'ACAA2', 
    'degradation'
)
В результате path_count = 2.

Пример вызова на тесте 2

gene_in_path = parse_gene_paths(table_text)
path_count = count_paths_for_gene(
    gene_in_path, 
    'SDS', 
    'metabolism'
)
В результате path_count = 3.

Ограничения на размер задачи

Количество запросов не превосходит 1000.